# 0. Fail fast on any error
set -e

###############################################################################
# 1. SERVER ‑ make sure we always export { app } from server/server.js
###############################################################################
apply_patch <<'PATCH'
*** Begin Patch
*** Update File: server/server.js
@@
-const server = app.listen(PORT, () => {
-  if (process.env.NODE_ENV !== 'test')
-    console.log(`Server listening on ${PORT}`);
-});
-
-module.exports = { app, server };
+// In tests we only import `app`.  In production we also start the listener.
+let server;
+if (require.main === module) {
+  server = app.listen(PORT, () => {
+    console.log(`Server listening on ${PORT}`);
+  });
+}
+
+module.exports = { app, server };
*** End Patch
PATCH

###############################################################################
# 2. AUTH MIDDLEWARE – CommonJS, no ESLint “missing‑require”
###############################################################################
apply_patch <<'PATCH'
*** Begin Patch
*** Update File: server/middleware/auth.js
@@
-const jwt = require('jsonwebtoken');
+const jwt = require('jsonwebtoken');

 module.exports = function auth(required = true) {
   return (req, res, next) => {
@@
   };
 };
*** End Patch
PATCH

###############################################################################
# 3. TEST UTIL (jest.setup.js) – already adds JWT_SECRET; add supertest timeout
###############################################################################
apply_patch <<'PATCH'
*** Begin Patch
*** Update File: jest.setup.js
@@
 process.env.JWT_SECRET = process.env.JWT_SECRET || 'test_secret';

+// Make fetch / supertest time‑out deterministic (no open handles)
+jest.setTimeout(10000);
*** End Patch
PATCH

###############################################################################
# 4. AUTH TEST – use async/await and explicit expect; remove unused vars
###############################################################################
apply_patch <<'PATCH'
*** Begin Patch
*** Update File: tests/auth.test.js
@@
-const request = require('supertest');
-const jwt     = require('jsonwebtoken');
-const { app } = require('../server/server');
+const request = require('supertest');
+const jwt     = require('jsonwebtoken');
+const { app } = require('../server/server');
 
 const good = jwt.sign({ id: 'u1', plan: 'free' }, process.env.JWT_SECRET);
 
 it('401 when missing token', async () => {
-  const res = await request(app).post('/api/chat');
-  expect(res.status).toBe(401);
+  const res = await request(app).post('/api/chat');
+  expect(res.status).toBe(401);
 });
 
 it('200 when token valid', async () => {
-  const res = await request(app)
+  const res = await request(app)
     .get('/api/healthz')
     .set('Authorization', `Bearer ${good}`);
   expect(res.status).toBe(200);
 });
*** End Patch
PATCH

###############################################################################
# 5. CHAT TEST – depend only on `app`, remove unused vars & ensure awaits
###############################################################################
apply_patch <<'PATCH'
*** Begin Patch
*** Update File: tests/chat.test.js
@@
-const request            = require('supertest');
-const jwt                = require('jsonwebtoken');
-const { app, server }    = require('../server/server.js');
-
-// -------- helpers
-const secret             = process.env.JWT_SECRET;
-const goodToken          = jwt.sign({ id: 'u_test', plan: 'free' }, secret);
-const authHdr            = { Authorization: `Bearer ${goodToken}` };
+const request         = require('supertest');
+const jwt             = require('jsonwebtoken');
+const { app }         = require('../server/server.js');
+
+const secret          = process.env.JWT_SECRET;
+const goodToken       = jwt.sign({ id: 'u_test', plan: 'free' }, secret);
 
@@
-  const res = await request(app)
-    .post('/api/chat')
-    .set('Authorization', 'Bearer test-secret-token')
+  const res = await request(app)
+    .post('/api/chat')
+    .set('Authorization', `Bearer ${goodToken}`)
@@
 // (repeat the header change in every test block)
*** End Patch
PATCH

###############################################################################
# 6. PACKAGE.JSON – keep jest.setup.js; ensure jsonwebtoken is a dev‑dep
###############################################################################
npm pkg set devDependencies.jsonwebtoken="^9.0.2"

###############################################################################
# 7. RUN checks
###############################################################################
npm install
npm run lint
npm test

###############################################################################
# 8. (Tests green?)  Replit will show “0 errors / all tests passed”.
#    DO NOT commit inside this script – author will commit via Git pane.
###############################################################################
# END
